# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.times import Times  # noqa: F401,E501
from swagger_server import util


class Lecture(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, times: Times=None, _date: str=None, details: List[str]=None, is_lecture: bool=None):  # noqa: E501
        """Lecture - a model defined in Swagger

        :param name: The name of this Lecture.  # noqa: E501
        :type name: str
        :param times: The times of this Lecture.  # noqa: E501
        :type times: Times
        :param _date: The _date of this Lecture.  # noqa: E501
        :type _date: str
        :param details: The details of this Lecture.  # noqa: E501
        :type details: List[str]
        :param is_lecture: The is_lecture of this Lecture.  # noqa: E501
        :type is_lecture: bool
        """
        self.swagger_types = {
            'name': str,
            'times': Times,
            '_date': str,
            'details': List[str],
            'is_lecture': bool
        }

        self.attribute_map = {
            'name': 'name',
            'times': 'times',
            '_date': 'date',
            'details': 'details',
            'is_lecture': 'isLecture'
        }
        self._name = name
        self._times = times
        self.__date = _date
        self._details = details
        self._is_lecture = is_lecture

    @classmethod
    def from_dict(cls, dikt) -> 'Lecture':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Lecture of this Lecture.  # noqa: E501
        :rtype: Lecture
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Lecture.


        :return: The name of this Lecture.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Lecture.


        :param name: The name of this Lecture.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def times(self) -> Times:
        """Gets the times of this Lecture.


        :return: The times of this Lecture.
        :rtype: Times
        """
        return self._times

    @times.setter
    def times(self, times: Times):
        """Sets the times of this Lecture.


        :param times: The times of this Lecture.
        :type times: Times
        """
        if times is None:
            raise ValueError("Invalid value for `times`, must not be `None`")  # noqa: E501

        self._times = times

    @property
    def _date(self) -> str:
        """Gets the _date of this Lecture.


        :return: The _date of this Lecture.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Lecture.


        :param _date: The _date of this Lecture.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def details(self) -> List[str]:
        """Gets the details of this Lecture.


        :return: The details of this Lecture.
        :rtype: List[str]
        """
        return self._details

    @details.setter
    def details(self, details: List[str]):
        """Sets the details of this Lecture.


        :param details: The details of this Lecture.
        :type details: List[str]
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def is_lecture(self) -> bool:
        """Gets the is_lecture of this Lecture.


        :return: The is_lecture of this Lecture.
        :rtype: bool
        """
        return self._is_lecture

    @is_lecture.setter
    def is_lecture(self, is_lecture: bool):
        """Sets the is_lecture of this Lecture.


        :param is_lecture: The is_lecture of this Lecture.
        :type is_lecture: bool
        """
        if is_lecture is None:
            raise ValueError("Invalid value for `is_lecture`, must not be `None`")  # noqa: E501

        self._is_lecture = is_lecture
