# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Times(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, end_min: float=None, end_hour: float=None, begin_min: float=None, begin_hour: float=None):  # noqa: E501
        """Times - a model defined in Swagger

        :param end_min: The end_min of this Times.  # noqa: E501
        :type end_min: float
        :param end_hour: The end_hour of this Times.  # noqa: E501
        :type end_hour: float
        :param begin_min: The begin_min of this Times.  # noqa: E501
        :type begin_min: float
        :param begin_hour: The begin_hour of this Times.  # noqa: E501
        :type begin_hour: float
        """
        self.swagger_types = {
            'end_min': float,
            'end_hour': float,
            'begin_min': float,
            'begin_hour': float
        }

        self.attribute_map = {
            'end_min': 'endMin',
            'end_hour': 'endHour',
            'begin_min': 'beginMin',
            'begin_hour': 'beginHour'
        }
        self._end_min = end_min
        self._end_hour = end_hour
        self._begin_min = begin_min
        self._begin_hour = begin_hour

    @classmethod
    def from_dict(cls, dikt) -> 'Times':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Times of this Times.  # noqa: E501
        :rtype: Times
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_min(self) -> float:
        """Gets the end_min of this Times.


        :return: The end_min of this Times.
        :rtype: float
        """
        return self._end_min

    @end_min.setter
    def end_min(self, end_min: float):
        """Sets the end_min of this Times.


        :param end_min: The end_min of this Times.
        :type end_min: float
        """
        if end_min is None:
            raise ValueError("Invalid value for `end_min`, must not be `None`")  # noqa: E501

        self._end_min = end_min

    @property
    def end_hour(self) -> float:
        """Gets the end_hour of this Times.


        :return: The end_hour of this Times.
        :rtype: float
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour: float):
        """Sets the end_hour of this Times.


        :param end_hour: The end_hour of this Times.
        :type end_hour: float
        """
        if end_hour is None:
            raise ValueError("Invalid value for `end_hour`, must not be `None`")  # noqa: E501

        self._end_hour = end_hour

    @property
    def begin_min(self) -> float:
        """Gets the begin_min of this Times.


        :return: The begin_min of this Times.
        :rtype: float
        """
        return self._begin_min

    @begin_min.setter
    def begin_min(self, begin_min: float):
        """Sets the begin_min of this Times.


        :param begin_min: The begin_min of this Times.
        :type begin_min: float
        """
        if begin_min is None:
            raise ValueError("Invalid value for `begin_min`, must not be `None`")  # noqa: E501

        self._begin_min = begin_min

    @property
    def begin_hour(self) -> float:
        """Gets the begin_hour of this Times.


        :return: The begin_hour of this Times.
        :rtype: float
        """
        return self._begin_hour

    @begin_hour.setter
    def begin_hour(self, begin_hour: float):
        """Sets the begin_hour of this Times.


        :param begin_hour: The begin_hour of this Times.
        :type begin_hour: float
        """
        if begin_hour is None:
            raise ValueError("Invalid value for `begin_hour`, must not be `None`")  # noqa: E501

        self._begin_hour = begin_hour
